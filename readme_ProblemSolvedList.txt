################################Issues################################

P01: The EL doesn't show with correct value in the index.jsp
     Message : ${message}
     Counter : ${counter}
     
A01:
Step 1: in web.xml
tag of <web-app> changed to 
tag of <web-app xmlns="http://java.sun.com/xml/ns/javaee" 
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	            xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	                                http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	            version="2.5">, 
(In Servlet 2.5, isELIgnored will be set as false, so you don't have to set  <%@ page isELIgnored="false" %> in each jsp page)
	     
Step 2: in web.xml, below comments removed
<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >
 
(Servlet 2.3 is old and isELIgnored will be auto set as true, 
so in this case, you may have to use <%@ page isELIgnored="false" %> in each jsp page if you want EL value displayed
#######################################################################

P02: Where to put javascript, css and image files in maven spring mvc project?

A02:
http://www.mkyong.com/spring-mvc/spring-mvc-how-to-include-js-or-css-files-in-a-jsp-page/

1. create resources folder under webapp

2. set mapping in mvc-dispatcher-servlet.xml file
2.1. add contribute in beans tag as below
     xmlns:mvc="http://www.springframework.org/schema/mvc"

2.2. add below into xsi:schemaLocation
     http://www.springframework.org/schema/mvc

2.3 add two lines within beans tag as below
	<mvc:annotation-driven /> 
	<mvc:resources mapping="/resources/**" location="/resources/" />


3. in jsp file, add below codes
<%@ taglib prefix="c" 
           uri="http://java.sun.com/jsp/jstl/core" %>

        <link href="<c:url value="/resources/bootstrap3.3.4/css/bootstrap.min.css" />" rel="stylesheet">
        <link href="<c:url value="/resources/bootstrap3.3.4/css/bootstrap-theme.min.css" />" rel="stylesheet">
        <!-- For datetimepicker1 only-->
        <link href="<c:url value="/resources/jquery-ui-1.11.4.custom/jquery-ui.css" />" rel="stylesheet">
        
        
        <script src="<c:url value="/resources/jQuery.1.11.3/js/jquery-1.11.3.min.js" />"></script>
        <script src="<c:url value="/resources/bootstrap3.3.4/js/bootstrap.min.js" />"></script>
        <!-- For datetimepicker1 only-->
        <script src="<c:url value="/resources/jquery-ui-1.11.4.custom/jquery-ui.js" />"></script>
#######################################################################

P03: How to make mvn web project runnable in heroku platform?

A03: Step 1: In pom.xml file add below codes
<!-- This section will be used after deployed to heroku to start web app. Please refer to Procfile as well -->
		  <!-- Before add this plugin, mvn pakcage command will generate folder structure as below:
		       classes
		       generated-sources
		       J10_CarRental
		       maven-archiver
		       J10_CarRental.war
		       
		       After add this plugin, mvn package will generate one more folder dependency, which contains webapp-runner.jar
		   -->
		   <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <version>2.3</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals><goal>copy</goal></goals>
                    <configuration>
                        <artifactItems>
                            <artifactItem>
                                <groupId>com.github.jsimone</groupId>
                                <artifactId>webapp-runner</artifactId>
                                <version>7.0.57.2</version>
                                <destFileName>webapp-runner.jar</destFileName>
                            </artifactItem>
                        </artifactItems>
                    </configuration>
                </execution>
            </executions>
        </plugin>
        
        Step2: Add Procfile file under project root folder and add below code to it
        # The target folder of following command, actually is the folder generated by mvn command
        # webapp-runner.jar defined as plugin in pom.xml, which will create dependency folder under target folder after invoking command of mvn package
        web: java $JAVA_OPTS -jar target/dependency/webapp-runner.jar --port $PORT target/*.war
        
        Step3: Use below commands to start web app in heroku
          1. Update pom.xml file
          2. Add Procfile in the root folder of the project
          3. git add .
          4. git commit -m "add Procfile and update pom.xml to make war runnable in heroku enviornment"
          5. git push heroku master
          6. heroku ps # Check if it is running. If yes go to step 9 directly, otherwise go to step 7 and 8 to see if any problems
          7. heroku ps:scale web=1
             Scaling dynos... done, now running web at 1:1X.
          8. heroku logs
          9. heroku open #automatically open a brower to access your website
#######################################################################

P04. Update the photo files of 10Standard_SUV.png and 11FullSize_SUV.png, but latest photo didn't appear in chrome browser.
A04. This problem can be originated from the mechanism of chrome cache or tomcat server cache.
     1. I close the chrome browser, and open again to access the link http://localhost:8080/J10_CarRental/bootstrap still no update images.
     2. But I open IE browser and access the same url, the latest change showed (Never use IE open this url before)
        So it demonstrate problems are from browser cache rather than tomcat server cache

#######################################################################        

P05. Importing Apache Tiles
A05. Steps as below:

1. Add dependency in pom.xml
		<!-- Add apache tile in for jsp template -->
		<dependency>
			<groupId>org.apache.tiles</groupId>
			<artifactId>tiles-extras</artifactId>
			<version>${tiles.version}</version>
		</dependency>

2. Add below configuration in mvc-dispatcher-servlet.xml
   Update internalResourceViewResolver with order value of 2
   Remember internalResourceViewResolver and tilesViewResolver can work together
   But the order must be tilesViewResolver go first than internalResourceViewResolver. 
   Vice Versa doesn't work
	<!-- Add below code for using Apache titles -->
	<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <property name="order" value="1" />
    </bean>
    
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	    <property name="definitions">
		     <list>
		         <value>/WEB-INF/tiles.xml</value>
		     </list>
	    </property>
    </bean>

3. Add titles.xml and tiles definition is inside

4. Add template.jsp, header.jsp, footer.jsp

4. Add methods in BaseController.java as well

5. Tiles can be accessed by two ways. Check the detail out by access method welcomeTile() and welcomeTile2()

#######################################################################

###########################Knowledge to learn #########################
Q01: Where to define the Servlet Version, and Jsp version in your web application?###
A01: You can check the web.xml file take below as below:

     <web-app xmlns="http://java.sun.com/xml/ns/javaee" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	     xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	                         http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	     version="2.5">
	  web-app_2_5.xsd and version="2.5" specify that servlet is in 2.5 version. And you can download http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd to see details:
	  
	  There are some examples as below:
	  Servlet 2.5 uses JSP 2.1 
	  Servlet 2.4 uses JSP 2.0 
	  Servlet 2.3 uses JSP 1.2 
	  Servlet 2.2 uses JSP 1.1 
	  Servlet 2.1 uses JSP 1.0
	  
	  For tomcat servlet and jsp support information, please refer to http://wiki.apache.org/tomcat/TomcatVersions
	  For tomcat 8, it supports servlet 3.1 and jsp 2.3, EL 3.0 and Websocket 1.1
	  
   
###2. How to resolve jar dependency issue in maven pom.xml###
   Pending...
   dependency management tag???
   
Eg: One jar dependant on commons-logging-1.0.4.jar; 
    The other jar dependant on commons-logging-1.1.1.jar.
    
    You need to configure a dependencyManagement section in your [parent] POM. 
    This will coerce artifacts coming as transitive dependencies to be of the specified version.
    http://stackoverflow.com/questions/5278292/dependency-conflicts-on-maven


############Technologies want to adopt in this project############
1. Tiles

2. Twitter BootStrap
	http://getbootstrap.com/getting-started/#download
	###Nav Bar
	http://www.w3schools.com/bootstrap/bootstrap_navbar.asp
	###Grid System
	http://www.w3schools.com/bootstrap/bootstrap_grid_system.asp
	###Panel
	http://www.w3schools.com/bootstrap/bootstrap_panels.asp
	###Table
	http://www.w3schools.com/bootstrap/bootstrap_tables.asp
	###Button
	http://www.w3schools.com/bootstrap/bootstrap_buttons.asp
	
	container vs container-fluid
	


	     